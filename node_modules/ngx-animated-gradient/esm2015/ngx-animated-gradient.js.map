{"version":3,"file":"ngx-animated-gradient.js","sources":["../../tmp/module/ngx-animated-gradient.directive.ts","../../tmp/module/ngx-animated-gradient.module.ts"],"sourcesContent":["import { Directive, ElementRef, OnInit, OnDestroy, Renderer2, Input } from '@angular/core';\nimport { timer, Subject, BehaviorSubject, combineLatest } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\n/**\n * A `RGBValue` containers the RGB values for a step in the gradient animation\n */\nexport type RGBValue = [number, number, number];\n\nexport type RGBTransition = [string, string];\n\nexport enum InterpolationDirection {\n  FORWARD,\n  BACKWARD\n}\n\n@Directive({\n  selector: '[ngxAnimatedGradient]'\n})\nexport class NgxAnimatedGradientDirective implements OnInit, OnDestroy {\n  /**\n   * A list of RGB Value tuples used to define the gradient\n   */\n  @Input()\n  colors: RGBValue[] = [[62, 35, 255], [60, 255, 60], [255, 35, 98], [45, 175, 230], [255, 0, 255], [255, 128, 0]];\n\n  /**\n   * The tick speed for calling the update of the gradient\n   */\n  @Input()\n  tickSpeed = 16;\n\n  /**\n   * The color indices, these indicate where in the color table to load from\n   * The order is as follows:\n   *   Current left, Next left, Current right, Next right\n   */\n  @Input()\n  colorIndices = [0, 1, 2, 3];\n\n  /**\n   * The multiplier for the gradient speed\n   */\n  @Input()\n  gradientSpeed = 0.002;\n\n  private direction = InterpolationDirection.FORWARD;\n\n  private step$ = new BehaviorSubject<number>(0);\n\n  private componentDestroyed$ = new Subject<boolean>();\n\n  private gradientRunning$ = new BehaviorSubject<boolean>(true);\n\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  ngOnInit(): void {\n    combineLatest(timer(0, this.tickSpeed), this.gradientRunning$)\n      .pipe(takeUntil(this.componentDestroyed$))\n      .subscribe(([_, gradientRunning]) => {\n        if (gradientRunning) {\n          let result =\n            this.direction === InterpolationDirection.FORWARD\n              ? this.step$.value + this.gradientSpeed\n              : this.step$.value - this.gradientSpeed;\n\n          if (result >= 1) {\n            this.direction = InterpolationDirection.BACKWARD;\n            result = 1;\n          } else if (result <= 0) {\n            this.direction = InterpolationDirection.FORWARD;\n            result = 0;\n          }\n          this.step$.next(result);\n        }\n      });\n\n    /**\n     * Combine the timer and gradient running to trigger rendering\n     */\n    combineLatest(this.step$, this.gradientRunning$)\n      .pipe(takeUntil(this.componentDestroyed$))\n      .subscribe(([step, gradientRunning]) => gradientRunning && this.render(this.generateColour(step), step));\n  }\n\n  ngOnDestroy() {\n    this.gradientRunning$.next(false);\n    this.componentDestroyed$.next(true);\n\n    this.gradientRunning$.complete();\n    this.componentDestroyed$.complete();\n  }\n\n  private createColor(index: number, step: number, value1: RGBValue, value2: RGBValue) {\n    const red = Math.round(index * value1[0] + step * value2[0]);\n    const green = Math.round(index * value1[1] + step * value2[1]);\n    const blue = Math.round(index * value1[2] + step * value2[2]);\n    return `rgb(${red}, ${green}, ${blue})`;\n  }\n\n  private getNewColour(index: number) {\n    return (this.colorIndices[index] + Math.floor(1 + Math.random() * (this.colors.length - 1))) % this.colors.length;\n  }\n\n  private generateColour(step: number): RGBTransition {\n    const stepIndex = 1 - step;\n    const color1 = this.createColor(\n      stepIndex,\n      step,\n      this.colors[this.colorIndices[0]],\n      this.colors[this.colorIndices[1]]\n    );\n    const color2 = this.createColor(\n      stepIndex,\n      step,\n      this.colors[this.colorIndices[2]],\n      this.colors[this.colorIndices[3]]\n    );\n\n    return [color1, color2];\n  }\n\n  /**\n   * Start the directive gradient animation\n   */\n  public start(): void {\n    this.gradientRunning$.next(true);\n  }\n\n  /**\n   * Stop the directive gradient animation\n   */\n  public stop(): void {\n    this.gradientRunning$.next(false);\n  }\n\n  /**\n   * Set a new palette for the animation\n   */\n  public newPalette(): void {\n    this.colorIndices[0] = this.colorIndices[1];\n    this.colorIndices[2] = this.colorIndices[3];\n    // pick two new target color indices\n    // do not pick the same as the current one\n    this.colorIndices[1] = this.getNewColour(1);\n    this.colorIndices[3] = this.getNewColour(3);\n  }\n\n  /**\n   * Update the gradient animation\n   */\n  public render(renderValue: RGBTransition, step: number) {\n    this.renderer.setStyle(\n      this.el.nativeElement,\n      'background',\n      `-webkit-gradient(linear, left top, right top, from(${renderValue[0]}), to(${renderValue[1]}))`\n    );\n\n    this.renderer.setStyle(\n      this.el.nativeElement,\n      'background',\n      `-moz-linear-gradient(left, ${renderValue[0]} 0%, ${renderValue[1]} 100%)`\n    );\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {NgxAnimatedGradientDirective} from './ngx-animated-gradient.directive';\n\n\n// Export module's public API\nexport {NgxAnimatedGradientDirective} from './ngx-animated-gradient.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [NgxAnimatedGradientDirective],\n  declarations: [NgxAnimatedGradientDirective]\n})\nexport class NgxAnimatedGradientModule {\n\n}\n"],"names":[],"mappings":"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"}