{"version":3,"file":"ngx-animated-gradient.umd.js","sources":["../../tmp/module/ngx-animated-gradient.directive.ts","../../tmp/module/ngx-animated-gradient.module.ts"],"sourcesContent":["import { Directive, ElementRef, OnInit, OnDestroy, Renderer2, Input } from '@angular/core';\nimport { timer, Subject, BehaviorSubject, combineLatest } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\n/**\n * A `RGBValue` containers the RGB values for a step in the gradient animation\n */\nexport type RGBValue = [number, number, number];\n\nexport type RGBTransition = [string, string];\n\nexport enum InterpolationDirection {\n  FORWARD,\n  BACKWARD\n}\n\n@Directive({\n  selector: '[ngxAnimatedGradient]'\n})\nexport class NgxAnimatedGradientDirective implements OnInit, OnDestroy {\n  /**\n   * A list of RGB Value tuples used to define the gradient\n   */\n  @Input()\n  colors: RGBValue[] = [[62, 35, 255], [60, 255, 60], [255, 35, 98], [45, 175, 230], [255, 0, 255], [255, 128, 0]];\n\n  /**\n   * The tick speed for calling the update of the gradient\n   */\n  @Input()\n  tickSpeed = 16;\n\n  /**\n   * The color indices, these indicate where in the color table to load from\n   * The order is as follows:\n   *   Current left, Next left, Current right, Next right\n   */\n  @Input()\n  colorIndices = [0, 1, 2, 3];\n\n  /**\n   * The multiplier for the gradient speed\n   */\n  @Input()\n  gradientSpeed = 0.002;\n\n  private direction = InterpolationDirection.FORWARD;\n\n  private step$ = new BehaviorSubject<number>(0);\n\n  private componentDestroyed$ = new Subject<boolean>();\n\n  private gradientRunning$ = new BehaviorSubject<boolean>(true);\n\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  ngOnInit(): void {\n    combineLatest(timer(0, this.tickSpeed), this.gradientRunning$)\n      .pipe(takeUntil(this.componentDestroyed$))\n      .subscribe(([_, gradientRunning]) => {\n        if (gradientRunning) {\n          let result =\n            this.direction === InterpolationDirection.FORWARD\n              ? this.step$.value + this.gradientSpeed\n              : this.step$.value - this.gradientSpeed;\n\n          if (result >= 1) {\n            this.direction = InterpolationDirection.BACKWARD;\n            result = 1;\n          } else if (result <= 0) {\n            this.direction = InterpolationDirection.FORWARD;\n            result = 0;\n          }\n          this.step$.next(result);\n        }\n      });\n\n    /**\n     * Combine the timer and gradient running to trigger rendering\n     */\n    combineLatest(this.step$, this.gradientRunning$)\n      .pipe(takeUntil(this.componentDestroyed$))\n      .subscribe(([step, gradientRunning]) => gradientRunning && this.render(this.generateColour(step), step));\n  }\n\n  ngOnDestroy() {\n    this.gradientRunning$.next(false);\n    this.componentDestroyed$.next(true);\n\n    this.gradientRunning$.complete();\n    this.componentDestroyed$.complete();\n  }\n\n  private createColor(index: number, step: number, value1: RGBValue, value2: RGBValue) {\n    const red = Math.round(index * value1[0] + step * value2[0]);\n    const green = Math.round(index * value1[1] + step * value2[1]);\n    const blue = Math.round(index * value1[2] + step * value2[2]);\n    return `rgb(${red}, ${green}, ${blue})`;\n  }\n\n  private getNewColour(index: number) {\n    return (this.colorIndices[index] + Math.floor(1 + Math.random() * (this.colors.length - 1))) % this.colors.length;\n  }\n\n  private generateColour(step: number): RGBTransition {\n    const stepIndex = 1 - step;\n    const color1 = this.createColor(\n      stepIndex,\n      step,\n      this.colors[this.colorIndices[0]],\n      this.colors[this.colorIndices[1]]\n    );\n    const color2 = this.createColor(\n      stepIndex,\n      step,\n      this.colors[this.colorIndices[2]],\n      this.colors[this.colorIndices[3]]\n    );\n\n    return [color1, color2];\n  }\n\n  /**\n   * Start the directive gradient animation\n   */\n  public start(): void {\n    this.gradientRunning$.next(true);\n  }\n\n  /**\n   * Stop the directive gradient animation\n   */\n  public stop(): void {\n    this.gradientRunning$.next(false);\n  }\n\n  /**\n   * Set a new palette for the animation\n   */\n  public newPalette(): void {\n    this.colorIndices[0] = this.colorIndices[1];\n    this.colorIndices[2] = this.colorIndices[3];\n    // pick two new target color indices\n    // do not pick the same as the current one\n    this.colorIndices[1] = this.getNewColour(1);\n    this.colorIndices[3] = this.getNewColour(3);\n  }\n\n  /**\n   * Update the gradient animation\n   */\n  public render(renderValue: RGBTransition, step: number) {\n    this.renderer.setStyle(\n      this.el.nativeElement,\n      'background',\n      `-webkit-gradient(linear, left top, right top, from(${renderValue[0]}), to(${renderValue[1]}))`\n    );\n\n    this.renderer.setStyle(\n      this.el.nativeElement,\n      'background',\n      `-moz-linear-gradient(left, ${renderValue[0]} 0%, ${renderValue[1]} 100%)`\n    );\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {NgxAnimatedGradientDirective} from './ngx-animated-gradient.directive';\n\n\n// Export module's public API\nexport {NgxAnimatedGradientDirective} from './ngx-animated-gradient.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [NgxAnimatedGradientDirective],\n  declarations: [NgxAnimatedGradientDirective]\n})\nexport class NgxAnimatedGradientModule {\n\n}\n"],"names":["BehaviorSubject","Subject","combineLatest","timer","takeUntil","Directive","Renderer2","ElementRef","Input","NgModule","CommonModule"],"mappings":"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"}