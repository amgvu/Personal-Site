{"version":3,"file":"ngx-animated-gradient.umd.min.js","sources":["../../tmp/module/ngx-animated-gradient.directive.ts","../../tmp/module/ngx-animated-gradient.module.ts"],"sourcesContent":["import { Directive, ElementRef, OnInit, OnDestroy, Renderer2, Input } from '@angular/core';\nimport { timer, Subject, BehaviorSubject, combineLatest } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\n/**\n * A `RGBValue` containers the RGB values for a step in the gradient animation\n */\nexport type RGBValue = [number, number, number];\n\nexport type RGBTransition = [string, string];\n\nexport enum InterpolationDirection {\n  FORWARD,\n  BACKWARD\n}\n\n@Directive({\n  selector: '[ngxAnimatedGradient]'\n})\nexport class NgxAnimatedGradientDirective implements OnInit, OnDestroy {\n  /**\n   * A list of RGB Value tuples used to define the gradient\n   */\n  @Input()\n  colors: RGBValue[] = [[62, 35, 255], [60, 255, 60], [255, 35, 98], [45, 175, 230], [255, 0, 255], [255, 128, 0]];\n\n  /**\n   * The tick speed for calling the update of the gradient\n   */\n  @Input()\n  tickSpeed = 16;\n\n  /**\n   * The color indices, these indicate where in the color table to load from\n   * The order is as follows:\n   *   Current left, Next left, Current right, Next right\n   */\n  @Input()\n  colorIndices = [0, 1, 2, 3];\n\n  /**\n   * The multiplier for the gradient speed\n   */\n  @Input()\n  gradientSpeed = 0.002;\n\n  private direction = InterpolationDirection.FORWARD;\n\n  private step$ = new BehaviorSubject<number>(0);\n\n  private componentDestroyed$ = new Subject<boolean>();\n\n  private gradientRunning$ = new BehaviorSubject<boolean>(true);\n\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\n\n  ngOnInit(): void {\n    combineLatest(timer(0, this.tickSpeed), this.gradientRunning$)\n      .pipe(takeUntil(this.componentDestroyed$))\n      .subscribe(([_, gradientRunning]) => {\n        if (gradientRunning) {\n          let result =\n            this.direction === InterpolationDirection.FORWARD\n              ? this.step$.value + this.gradientSpeed\n              : this.step$.value - this.gradientSpeed;\n\n          if (result >= 1) {\n            this.direction = InterpolationDirection.BACKWARD;\n            result = 1;\n          } else if (result <= 0) {\n            this.direction = InterpolationDirection.FORWARD;\n            result = 0;\n          }\n          this.step$.next(result);\n        }\n      });\n\n    /**\n     * Combine the timer and gradient running to trigger rendering\n     */\n    combineLatest(this.step$, this.gradientRunning$)\n      .pipe(takeUntil(this.componentDestroyed$))\n      .subscribe(([step, gradientRunning]) => gradientRunning && this.render(this.generateColour(step), step));\n  }\n\n  ngOnDestroy() {\n    this.gradientRunning$.next(false);\n    this.componentDestroyed$.next(true);\n\n    this.gradientRunning$.complete();\n    this.componentDestroyed$.complete();\n  }\n\n  private createColor(index: number, step: number, value1: RGBValue, value2: RGBValue) {\n    const red = Math.round(index * value1[0] + step * value2[0]);\n    const green = Math.round(index * value1[1] + step * value2[1]);\n    const blue = Math.round(index * value1[2] + step * value2[2]);\n    return `rgb(${red}, ${green}, ${blue})`;\n  }\n\n  private getNewColour(index: number) {\n    return (this.colorIndices[index] + Math.floor(1 + Math.random() * (this.colors.length - 1))) % this.colors.length;\n  }\n\n  private generateColour(step: number): RGBTransition {\n    const stepIndex = 1 - step;\n    const color1 = this.createColor(\n      stepIndex,\n      step,\n      this.colors[this.colorIndices[0]],\n      this.colors[this.colorIndices[1]]\n    );\n    const color2 = this.createColor(\n      stepIndex,\n      step,\n      this.colors[this.colorIndices[2]],\n      this.colors[this.colorIndices[3]]\n    );\n\n    return [color1, color2];\n  }\n\n  /**\n   * Start the directive gradient animation\n   */\n  public start(): void {\n    this.gradientRunning$.next(true);\n  }\n\n  /**\n   * Stop the directive gradient animation\n   */\n  public stop(): void {\n    this.gradientRunning$.next(false);\n  }\n\n  /**\n   * Set a new palette for the animation\n   */\n  public newPalette(): void {\n    this.colorIndices[0] = this.colorIndices[1];\n    this.colorIndices[2] = this.colorIndices[3];\n    // pick two new target color indices\n    // do not pick the same as the current one\n    this.colorIndices[1] = this.getNewColour(1);\n    this.colorIndices[3] = this.getNewColour(3);\n  }\n\n  /**\n   * Update the gradient animation\n   */\n  public render(renderValue: RGBTransition, step: number) {\n    this.renderer.setStyle(\n      this.el.nativeElement,\n      'background',\n      `-webkit-gradient(linear, left top, right top, from(${renderValue[0]}), to(${renderValue[1]}))`\n    );\n\n    this.renderer.setStyle(\n      this.el.nativeElement,\n      'background',\n      `-moz-linear-gradient(left, ${renderValue[0]} 0%, ${renderValue[1]} 100%)`\n    );\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {NgxAnimatedGradientDirective} from './ngx-animated-gradient.directive';\n\n\n// Export module's public API\nexport {NgxAnimatedGradientDirective} from './ngx-animated-gradient.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [NgxAnimatedGradientDirective],\n  declarations: [NgxAnimatedGradientDirective]\n})\nexport class NgxAnimatedGradientModule {\n\n}\n"],"names":["FORWARD","BACKWARD","renderer","el","this","InterpolationDirection","BehaviorSubject","Subject","NgxAnimatedGradientDirective","combineLatest","timer","tickSpeed","gradientRunning$","pipe","takeUntil","componentDestroyed$","subscribe","_a","result","_this","direction","step$","value","gradientSpeed","next","step","render","generateColour","complete","index","value1","value2","Math","round","colorIndices","floor","random","colors","length","stepIndex","createColor","getNewColour","renderValue","setStyle","nativeElement","Directive","selector","Renderer2","ElementRef","Input","NgModule","imports","CommonModule","exports","declarations"],"mappings":"gaAYEA,UACAC,6EAyCA,WAAoBC,EAA6BC,GAA7BC,cAAAF,EAA6BE,QAAAD,EA9BjDC,cAAuB,GAAI,GAAI,MAAO,GAAI,IAAK,KAAM,IAAK,GAAI,KAAM,GAAI,IAAK,MAAO,IAAK,EAAG,MAAO,IAAK,IAAK,IAM7GA,eAAY,GAQZA,mBAAgB,EAAG,EAAG,EAAG,GAMzBA,mBAAgB,KAERA,eAAYC,EAAuBL,QAEnCI,WAAQ,IAAIE,kBAAwB,GAEpCF,yBAAsB,IAAIG,UAE1BH,sBAAmB,IAAIE,mBAAyB,GAgH1D,OA5GEE,qBAAA,WAAA,WACEC,gBAAcC,QAAM,EAAGN,KAAKO,WAAYP,KAAKQ,kBAC1CC,KAAKC,YAAUV,KAAKW,sBACpBC,mBAAWC,QACV,QAAqB,KACfC,EACFC,EAAKC,YAAcf,EAAuBL,QACtCmB,EAAKE,MAAMC,MAAQH,EAAKI,cACxBJ,EAAKE,MAAMC,MAAQH,EAAKI,cAE1BL,GAAU,GACZC,EAAKC,UAAYf,EAAuBJ,SACxCiB,EAAS,GACAA,GAAU,IACnBC,EAAKC,UAAYf,EAAuBL,QACxCkB,EAAS,GAEXC,EAAKE,MAAMG,KAAKN,MAOtBT,gBAAcL,KAAKiB,MAAOjB,KAAKQ,kBAC5BC,KAAKC,YAAUV,KAAKW,sBACpBC,mBAAWC,OAACQ,OAA2B,aAAmBN,EAAKO,OAAOP,EAAKQ,eAAeF,GAAOA,MAGtGjB,wBAAA,WACEJ,KAAKQ,iBAAiBY,MAAK,GAC3BpB,KAAKW,oBAAoBS,MAAK,GAE9BpB,KAAKQ,iBAAiBgB,WACtBxB,KAAKW,oBAAoBa,YAGnBpB,wBAAR,SAAoBqB,EAAeJ,EAAcK,EAAkBC,GAIjE,MAAO,OAHKC,KAAKC,MAAMJ,EAAQC,EAAO,GAAKL,EAAOM,EAAO,SAC3CC,KAAKC,MAAMJ,EAAQC,EAAO,GAAKL,EAAOM,EAAO,SAC9CC,KAAKC,MAAMJ,EAAQC,EAAO,GAAKL,EAAOM,EAAO,SAIpDvB,yBAAR,SAAqBqB,GACnB,OAAQzB,KAAK8B,aAAaL,GAASG,KAAKG,MAAM,EAAIH,KAAKI,UAAYhC,KAAKiC,OAAOC,OAAS,KAAOlC,KAAKiC,OAAOC,QAGrG9B,2BAAR,SAAuBiB,OACfc,EAAY,EAAId,EActB,OAberB,KAAKoC,YAClBD,EACAd,EACArB,KAAKiC,OAAOjC,KAAK8B,aAAa,IAC9B9B,KAAKiC,OAAOjC,KAAK8B,aAAa,KAEjB9B,KAAKoC,YAClBD,EACAd,EACArB,KAAKiC,OAAOjC,KAAK8B,aAAa,IAC9B9B,KAAKiC,OAAOjC,KAAK8B,aAAa,OAS3B1B,kBAAP,WACEJ,KAAKQ,iBAAiBY,MAAK,IAMtBhB,iBAAP,WACEJ,KAAKQ,iBAAiBY,MAAK,IAMtBhB,uBAAP,WACEJ,KAAK8B,aAAa,GAAK9B,KAAK8B,aAAa,GACzC9B,KAAK8B,aAAa,GAAK9B,KAAK8B,aAAa,GAGzC9B,KAAK8B,aAAa,GAAK9B,KAAKqC,aAAa,GACzCrC,KAAK8B,aAAa,GAAK9B,KAAKqC,aAAa,IAMpCjC,mBAAP,SAAckC,EAA4BjB,GACxCrB,KAAKF,SAASyC,SACZvC,KAAKD,GAAGyC,cACR,aACA,sDAAsDF,EAAY,YAAWA,EAAY,SAG3FtC,KAAKF,SAASyC,SACZvC,KAAKD,GAAGyC,cACR,aACA,8BAA8BF,EAAY,WAAUA,EAAY,kCAjJrEG,mBACCC,SAAU,qEAjBuCC,mBAA/BC,gDAuBjBC,2BAMAA,8BAQAA,+BAMAA,6BCnCH,cASA,2BATCC,kBACCC,SACEC,gBAEFC,SAAU7C,GACV8C,cAAe9C"}